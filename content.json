{"meta":{"title":"Linpupil","subtitle":"Linpupil's blog","description":"Linpupil,blog,javascript","author":"Linpupil","url":"https://linpupil.github.io"},"pages":[],"posts":[{"title":"js的replace()函数","slug":"js的replace-函数","date":"2017-09-22T07:54:12.000Z","updated":"2017-09-25T02:26:07.878Z","comments":true,"path":"2017/09/22/js的replace-函数/","link":"","permalink":"https://linpupil.github.io/2017/09/22/js的replace-函数/","excerpt":"","text":"JavaScript中的replace()函数相信是大家常用到的一个函数，由名字可知它主要用于字符串的替换；在W3C的文档中是这样定义的：replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。 语法1stringObject.replace(regexp/substr,replacement) 字符串替换的用法很简单，就不多做说明了，这里讲一下正则表达式的用法；12var str=\"abcabc!\"console.log(str.replace(/a/, \"\")); 上面这个例子，输出的结果是 bcabc，正则表达式表达式匹配到了a，替换了第一个后就不继续工作了，若需要匹配所有的a需要在/a/后面加上g，表示全局匹配的意思，这点相信大家也知道；接下来讲的一点是经常被大家忽略的，W3C的文档例子中的第6个。12345//将把字符串中所有单词的首字母都转换为大写：name = 'aaa bbb ccc';uw=name.replace(/\\b\\w+\\b/g, function(word)&#123; return word.substring(0,1).toUpperCase()+word.substring(1);&#125;); replace()中的replacement还可以是function，function中可以接收一个参数（此处用的是word），这个应该可以猜得到，就是前面正则匹配得到的结果；这里是把每个字符串的首字母都替换成大写的，function便可以做到这点。 接下来看多个例子：1234567891011function fn(str)&#123; this.str = str;&#125;fn.prototype.format = function()&#123; var arg = arguments; return this.str.replace(/\\&#123;(\\d)\\&#125;/g,function(a,b)&#123; return arg[b]||\"\"; &#125;)&#125;var t =new fn('&lt;p&gt;&lt;a href=\"&#123;0&#125;\"&gt;&#123;1&#125;&lt;/a&gt;&lt;span&gt;&#123;2&#125;&lt;/span&gt;&lt;/p&gt;');console.log(t.format('http:baidu.com',\"Linpupil\",\"Welcome\")); 上面例子log出来的结果可以猜到吧：1&lt;p&gt;&lt;a href=\"http:baidu.com\"&gt;Linpupil&lt;/a&gt;&lt;span&gt;Welcome&lt;/span&gt;&lt;/p&gt; 但是明白为什么吗？这里看到replacement传了a和b两个参数，跟前面的一样，a还是正则匹配到的内容，那么b是什么呢？b在这里分两种情况 如果没有捕获组（就是正则里面的小()括号），b就是匹配的位置； 如果有捕获组，那么就是捕获组捕获到的内容； 注：捕获组可以有多个，那么函数里传的参数也相应得增多，对应每个捕获组； 例子中的捕获组是(\\d)，那么函数里面的b匹配到的自然是每个{}的内容，分别为0,1,2分别arguments对应中的参数；*注： arguments是函数的内置属性，存在于每个函数当中，arguments是一个类数组对象，它和数组很类似，但又不是一个数组。","categories":[],"tags":[]},{"title":"深度复制与浅度复制（javascript）","slug":"深度复制与浅度复制（javascript）","date":"2017-09-21T07:10:12.000Z","updated":"2017-09-22T06:22:02.508Z","comments":true,"path":"2017/09/21/深度复制与浅度复制（javascript）/","link":"","permalink":"https://linpupil.github.io/2017/09/21/深度复制与浅度复制（javascript）/","excerpt":"","text":"深浅复制在js中主要表现在数组（Array）和对象（Object）中。直接进入正题，举个简单易懂的例子： 数组浅复制的例子 12345var testArray = [0,1,2]var copyArray = testArray;copyArray[0] = \"change\";console.log(copyArray); //输出[\"change\", 1, 2]console.log(testArray); //输出[\"change\", 1, 2] 当我们将testArray赋值给copyArray后，修改copyArray的第0个值，testArray的第0个值也跟着被修改了，这就是所谓的浅复制；对象的浅复制也是同样的道理： 12345var testObject = &#123;name: \"liming\", sex: \"man\"&#125;var copyObject = testObject;copyObject.sex = \"woman\";console.log(copyObject); //输出&#123;name: \"liming\", sex: \"woman\"&#125;console.log(testObject); //输出&#123;name: \"liming\", sex: \"woman\"&#125; 这里的sex修改后也一样影响到了原对象；so, questions here 为什么会产生浅复制这种现象？对于对象来说，浅复制是对对象地址的复制，没有开辟新的栈，也就是复制的结果是两个对象指向同一个地址，修改其中一个对象的属性，则另一个对象的属性也会改变； 那么怎么解决呢？解决的方法有很多种，在这里就不一一列举了，列举常见的两种1.采用递归解决 123456789101112131415161718192021var testObject = &#123;name: \"liming\", sex: \"man\"&#125;function deepCopy(obj,copy)&#123; var copy = copy || &#123;&#125;; for(var i in obj)&#123; if(typeof obj[i] === 'object')&#123; //要考虑深复制问题了 if(obj[i].constructor === Array)&#123; copy[i] =[]; &#125;else&#123; copy[i] = &#123;&#125;; &#125; deepCopy(obj[i],copy[i]); &#125;else&#123; copy[i] = obj[i]; &#125; &#125; return copy;&#125;var copyObject = deepCopy(testObject);copyObject.sex = \"woman\";console.log(testObject) //&#123;name: \"liming\", sex: \"man\"&#125; 此方法的缺点是： 运行效率较低（递归函数的通性）； 2.采用JSON解析 1234var testObject = &#123;name: \"liming\", sex: \"man\"&#125;var copyObject = JSON.parse(JSON.stringify(testObject));copyObject.sex = \"woman\";console.log(testObject) //&#123;name: \"liming\", sex: \"man\"&#125; 此方法的缺点是： 只能处理Number, String, Boolean, Array等对象","categories":[],"tags":[]},{"title":"前言","slug":"first-test-article","date":"2017-09-14T07:27:13.000Z","updated":"2017-09-22T01:52:10.768Z","comments":true,"path":"2017/09/14/first-test-article/","link":"","permalink":"https://linpupil.github.io/2017/09/14/first-test-article/","excerpt":"","text":"这里好像需要来点前言？？？现在想不到要写什么，就留着等以后想写了再写 主要是对工作中、学习中的一些经验总结，或者对一些知识点的理解，认识等，把它写进自己的博客，可以给其他有需要的人，也方便自己重拾，加深理解等； 附琦钰老师","categories":[],"tags":[]}]}