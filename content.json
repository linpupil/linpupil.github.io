{"meta":{"title":"Linpupil","subtitle":"Linpupil's blog","description":"Linpupil,blog,javascript","author":"Linpupil","url":"https://linpupil.github.io"},"pages":[],"posts":[{"title":"深度复制与浅度复制（javascript）","slug":"深度复制与浅度复制（javascript）","date":"2017-09-21T07:10:12.000Z","updated":"2017-09-22T02:33:24.570Z","comments":true,"path":"2017/09/21/深度复制与浅度复制（javascript）/","link":"","permalink":"https://linpupil.github.io/2017/09/21/深度复制与浅度复制（javascript）/","excerpt":"","text":"深浅复制在js中主要表现在数组（Array）和对象（Object）中。直接切入主题，上简单易懂的例子： 数组浅复制的例子 12345var testArray = [0,1,2]var copyArray = testArray;copyArray[0] = \"change\";console.log(copyArray); //输出[\"change\", 1, 2]console.log(testArray); //输出[\"change\", 1, 2] 当我们将testArray赋值给copyArray后，修改copyArray的第0个值，testArray的第0个值也跟着被修改了，这就是所谓的浅复制；对象的浅复制也是同样的道理： 12345var testObject = &#123;name: \"liming\", sex: \"man\"&#125;var copyObject = testObject;copyObject.sex = \"woman\";console.log(copyObject); //输出&#123;name: \"liming\", sex: \"woman\"&#125;console.log(testObject); //输出&#123;name: \"liming\", sex: \"woman\"&#125; 这里的sex修改后也一样影响到了原对象；so, questions here 为什么会产生浅复制这种现象？对于对象来说，浅复制是对对象地址的复制，没有开辟新的栈，也就是复制的结果是两个对象指向同一个地址，修改其中一个对象的属性，则另一个对象的属性也会改变； 那么怎么解决呢？1.采用递归解决 123456789101112131415161718192021var testObject = &#123;name: \"liming\", sex: \"man\"&#125;function deepCopy(obj,copy)&#123; var copy = copy || &#123;&#125;; for(var i in obj)&#123; if(typeof obj[i] === 'object')&#123; //要考虑深复制问题了 if(obj[i].constructor === Array)&#123; copy[i] =[]; &#125;else&#123; copy[i] = &#123;&#125;; &#125; deepCopy(obj[i],copy[i]); &#125;else&#123; copy[i] = obj[i]; &#125; &#125; return copy;&#125;var copyObject = deepCopy(testObject);copyObject.sex = \"woman\";console.log(testObject) //&#123;name: \"liming\", sex: \"man\"&#125; 此方法的缺点是：运行效率较低（递归函数的通性）； 2.采用JSON解析 1234var testObject = &#123;name: \"liming\", sex: \"man\"&#125;var copyObject = JSON.parse(JSON.stringify(testObject));copyObject.sex = \"woman\";console.log(testObject) //&#123;name: \"liming\", sex: \"man\"&#125; 此方法的缺点是：只能处理Number, String, Boolean, Array等对象","categories":[],"tags":[]},{"title":"前言","slug":"first-test-article","date":"2017-09-14T07:27:13.000Z","updated":"2017-09-22T01:52:10.768Z","comments":true,"path":"2017/09/14/first-test-article/","link":"","permalink":"https://linpupil.github.io/2017/09/14/first-test-article/","excerpt":"","text":"这里好像需要来点前言？？？现在想不到要写什么，就留着等以后想写了再写 主要是对工作中、学习中的一些经验总结，或者对一些知识点的理解，认识等，把它写进自己的博客，可以给其他有需要的人，也方便自己重拾，加深理解等； 附琦钰老师","categories":[],"tags":[]}]}